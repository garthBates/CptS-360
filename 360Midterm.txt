CS360 EXAM   NAME Garth Bates______________________ ID 11473063

         NOTE!!!! WRITE YOUR ANASERS IN THE SPACE PROVIDED ONLY.
------------------------------------------------------------------------
         POINTS: 20 questions, 5 points each. TOTAL: 100 points
------------------------------------------------------------------------

1. Assume: char buf[512] contains 4 partitions P1, P2, P3, P4, which begin at
   the byte offset 0x1BE. Each partition is a

       struct partition{ char dummy[8]; int start_sector, nr_sectors; };

(1). Define a partition POINTER and let it point at P4 in buf[]:



partition * P3 = read_partition(2, buff, start_sector);



(2). Print the start_sector of P4:



printf("%8d", p3 -> start_sector);



2. YOU wrote a myprintf() function before. Consider the following C program:

  --------------------------------------------------------------------------
   int f, g = 123; char *s="string";|   // YOUR myprintf function
   int main(int argc, char *argv[]) |   int myprintf(                      )
   {                                |   { 
     int a = 1, b = 2;              |       char *cp;  int *ip;
     myprintf("%d %d %s",a,b,s);    |   HERE: 
   }                                |   }
  ---------------------------------------------------------------------------
(1). YOUR myprintf() function head is incomplete. Make it complete.


int myprintf(char *args[])

(2). Which of the variables f,g,s,a,b,cp,ip are in a.out file?
     WHY?

g,a,s,b,cp,ip are in a.out since they are compiled from the c program.

(3). Execution is at the label HERE: Draw a diagram to show the stack contents
  from HERE to argv of main(). Also, show the STACK FRAME pointer of myprintf()


int b -> int a -> FS* myrpintf() -> char *s -> int g -> int f

     



(4). While at HERE, how to tell CPU where is the local variable cp?
     where is the parameter a?




3.1. Write C statements to define a node structure with the following items:
----------------------------------------------- WRITE your ANSWER HERE ---------
name   : an array of 32 chars;        |   char name[32];
value  : integer                      |   char * child = name[0]
next   : pointer to next node;        |   char * subling = child -> next;
--------------------------------------|----------------------------------------
                                      |
Then, define a node variable      X   :    NODE X = new NODE;
        Print name of             X   :    print(X.name);

      define a POINTER p point at X   :    NODE * p = X;
        Use p to print value of   X   :    print(p.name);
                                      ----------------------------------------
				      
Assume LIST is a (may be empty) list of nodes. p points at a new node X.
3.2. Write code to INSERT p to the END of LIST.

while(len.LIST != 0){
	while(curr.next != null){
		curr = curr.next;
	}
	curr.next = p;
}



3.3. Write a search() fucntion, which SEARCH LIST for a node with value=VALUE,
     retrun the node POINTER if found, else return NULL

NODE * search(NODE * curr, VALUE){
	while(curr.value != VALUE){ 
		search(curr.next, VALUE);
	}
	return &curr;




3.4. Write cdoe to DELETE a node with value==VALUE from LIST.
     (HINT: use results of Question 3.3)

delete(NODE * curr, VALUE){
	target = search(curr.next, VALUE);
	tail = &target.next.next;
	&target.next = &tail;





4. Assume YOUR sh of LAB3: Given:
     int pid, status; char line[128];
     
(1). Write C code to
     gets(line);   // get a command line
     fork a child; parent wait for child to die; then repeat gets();

	while(child != dead){	
		fork.child();
		child(line);
		kill.child();
	}




------------------------------ child sh --------------------------------------
(2). Assume gets(line); got a line = CMD a b c > outfile
     Write C code to divide the command line in char line[ ] into token strings

tokenize (char [] line) {
	char* a = line[0];
	while(a != null){
		token.a = new toke("%s", a);
		a++;
	}
}
(3). Write C code to do   > outfile

	curr[i] = '\0';
 	





(4). Assume the CMD file is in the /bin directory. Write C code to execute CMD,
     passing myargv[], env[] as parameters :



(5). For the command line = CMD a b c > outfile, show EXACLY what is myargv[]

	myargv[] = [a,b,c]


(6). Assume command line = cat file | grep print 
     Wrtie C code to handle the pipe symbol | 
     
	pipe_cmd[0] = strtok(user_input, "|");	
	for(auto inde = 1; pipe_cmd[index] = strtok(NULL, "|"); index++);
	










5. For the following code segments:

       int total = 0;  pthread_mutex m;   // an intitlaized mutex
       
       void *func(void *arg)
       { 
   S1:    int value = (int)arg;
   S2:    total += value;   
   S3:    pthread_exit(value);   
       }
       int main()
       {  pthread_t tid[4];   int status;

------------------Write CODE for main thread -----------------------------
(1).  Create 4 threads to execute func(), each with a unique arg value 1 to 4.
   	for(i = 0, i < 4, i++){
		pthread_create(&tid[i], NULL, func(i+1));
	}

(2).   Wait for all 4 threads to terminate :
	pthread_join(threads);
	pthread_barrier(threads);


(3). Which statement in func() is a Critical Region?
     WHY?
	S3 since it tells the thread to exit. If its not there the program crashes.


(4). Write C code to protect the Critical Region:

